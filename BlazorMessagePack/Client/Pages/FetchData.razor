@page "/fetchdata"
@using BlazorMessagePack.Shared
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<h1>Weather forecast</h1>
<hr />
<p>This component demonstrates fetching data from the server.</p>
<p>
    <button class="btn btn-primary"
            disabled="@disconnected"
            @onclick="GenerateReport">
        Generate Report
    </button>
</p>
<br />
@if (forecasts != null) {
    <table class="table table-sm" style="font-family:Courier New, Courier, monospace">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts) {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    WeatherForecast[] forecasts;
    HubConnection hubConnection;
    bool disconnected;

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("URI: {0}", NavigationManager.ToAbsoluteUri("/WeatherForecast"));

        try {
            hubConnection = new HubConnectionBuilder()
               .WithUrl(NavigationManager.ToAbsoluteUri("/WeatherForecast"))
               .Build();
            await hubConnection.StartAsync();

            disconnected= hubConnection.State== HubConnectionState.Disconnected;
        }
        catch (Exception e) {
            Console.WriteLine("Exception: {0}", e.Message);
        }

        hubConnection.On<WeatherReport>("Report", (weatherReport) => {
            forecasts = weatherReport.Forecasts.ToArray();
            StateHasChanged();
        });

    }

    async Task GenerateReport()
    {
        await hubConnection.SendAsync("GenerateReport", 50);
    }

    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }
}
